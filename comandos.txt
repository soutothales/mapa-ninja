#1 shp2json 25SEE250GC_SIR.shp -o pb.json

#2 geoproject 'd3.geoOrthographic().rotate([54, 14, -2]).fitSize([1000, 600], d)' < pb.json > pb-ortho.json

#3 geo2svg -w 1000 -h 600 < pb-ortho.json > pb-ortho.svg

#4 ndjson-split 'd.features' < pb.json > new-pb.ndjson

#5 dsv2json --input-encoding latin1 -r ';' -n < Basico_PB.csv > pb-censo.ndjson

ndjson-map 'd.Cod_setor = d.properties.CD_GEOCODI, d' < new-pb.ndjson > saida-ortho-sector.ndjson

ndjson-join 'd.Cod_setor' saida-ortho-sector.ndjson pb-censo.ndjson > geo-censo-pb.ndjson

ndjson-map 'd[0].properties = {renda: Number(d[1].V005.replace(",", "."))}, d[0]' < geo-censo-pb.ndjson > pb-ortho-comdado.ndjson

#6 geo2topo -n tracts=pb-ortho-comdado.ndjson > pb-tracts-topo.json

toposimplify -p 1 -f < pb-tracts-topo.json | topoquantize 1e5 > pb-quantized-topo.json

#7 topo2geo tracts=- < pb-quantized-topo.json | ndjson-map -r d3 'z = d3.scaleSequential(d3.interpolateViridis).domain([0, 1e3]), d.features.forEach(f => f.properties.fill = z(f.properties.renda)), d' | ndjson-split 'd.features' | geo2svg -n --stroke none -w 1000 -h 600 > pb-tracts-threshold-light.svg
